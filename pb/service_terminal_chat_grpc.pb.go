// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: service_terminal_chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TerminalChat_ProcessMessage_FullMethodName = "/pb.TerminalChat/ProcessMessage"
)

// TerminalChatClient is the client API for TerminalChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerminalChatClient interface {
	ProcessMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error)
}

type terminalChatClient struct {
	cc grpc.ClientConnInterface
}

func NewTerminalChatClient(cc grpc.ClientConnInterface) TerminalChatClient {
	return &terminalChatClient{cc}
}

func (c *terminalChatClient) ProcessMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, TerminalChat_ProcessMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminalChatServer is the server API for TerminalChat service.
// All implementations must embed UnimplementedTerminalChatServer
// for forward compatibility
type TerminalChatServer interface {
	ProcessMessage(context.Context, *MessageRequest) (*MessageReply, error)
	mustEmbedUnimplementedTerminalChatServer()
}

// UnimplementedTerminalChatServer must be embedded to have forward compatible implementations.
type UnimplementedTerminalChatServer struct {
}

func (UnimplementedTerminalChatServer) ProcessMessage(context.Context, *MessageRequest) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMessage not implemented")
}
func (UnimplementedTerminalChatServer) mustEmbedUnimplementedTerminalChatServer() {}

// UnsafeTerminalChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerminalChatServer will
// result in compilation errors.
type UnsafeTerminalChatServer interface {
	mustEmbedUnimplementedTerminalChatServer()
}

func RegisterTerminalChatServer(s grpc.ServiceRegistrar, srv TerminalChatServer) {
	s.RegisterService(&TerminalChat_ServiceDesc, srv)
}

func _TerminalChat_ProcessMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalChatServer).ProcessMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminalChat_ProcessMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalChatServer).ProcessMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TerminalChat_ServiceDesc is the grpc.ServiceDesc for TerminalChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TerminalChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TerminalChat",
	HandlerType: (*TerminalChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessMessage",
			Handler:    _TerminalChat_ProcessMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_terminal_chat.proto",
}
